/*
 * generated by Xtext 2.20.0
 */
package simpleui.validation

import java.util.Date
import org.eclipse.emf.ecore.EClass
import org.eclipse.xtext.validation.Check
import simpleui.Application
import simpleui.Component
import simpleui.Helpers
import simpleui.ModuleImport
import simpleui.Node
import simpleui.SimpleuiPackage
import value.DictionaryValue
import value.MetadataHolder
import value.ValueFactory

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SimpleUILanguageValidator extends AbstractSimpleUILanguageValidator {

    @Check
    def check(Application application) {
        println(Thread.currentThread.name + " - " + new Date + " - Checking application")
//        application.imports.forEach [
//            Helpers.findPackage(application.eResource, it.importedModule, true)
//        ]
    }

    @Check
    def checkComponent(Component component) {
        validateMetadata(component)
    }
    
    @Check
    def checkNode(Node node) {
        validateMetadata(node)
    }
    

    @Check
    def checkApplicationModuleImport(ModuleImport moduleImport) {
        val packageFound = Helpers.findPackage(moduleImport.eResource, moduleImport.importedModule, true)
        if (packageFound === null) {
            error("No module found with name " + moduleImport.importedModule, moduleImport,
                SimpleuiPackage.Literals.MODULE_IMPORT__IMPORTED_MODULE)
            return
        }
    }

    private def void validateMetadata(MetadataHolder component) {
        val componentType = component.metadataType
        
        // use an empty dictionary to check if there are required slots while avoiding null-pointers
        val metadata = component.metadata ?: ValueFactory.eINSTANCE.createDictionaryValue() 
        new ValueValidationUtils(messageAcceptor).validateDictionary(componentType as EClass, metadata as DictionaryValue)
    }

}
