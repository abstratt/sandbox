/*
 * generated by Xtext 2.20.0
 */
package simpleui.scoping

import java.util.Comparator
import java.util.List
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import simpleui.Helpers
import simpleui.ModuleImport
import simpleui.SimpleuiPackage
import value.ValuePackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SimpleUILanguageScopeProvider extends AbstractSimpleUILanguageScopeProvider {

    override getScope(EObject context, EReference reference) {
        if (reference == SimpleuiPackage.Literals.COMPONENT__COMPONENT_TYPE || reference == SimpleuiPackage.Literals.NODE__COMPONENT_TYPE) {
            val scopeContents = computeComponentTypeScope(context)
            return Scopes.scopeFor(scopeContents)
        }
        if (reference == ValuePackage.Literals.SLOT__NAME) {
            println(ValuePackage.Literals.SLOT__NAME)
        }
        if (reference == ValuePackage.Literals.SLOT__VALUE) {
            println(ValuePackage.Literals.SLOT__VALUE)
        }
        val result = super.getScope(context, reference)
        result
    }
    
    public static def List<EClass> computeComponentTypeScope(EObject context) {
        val rootElement = EcoreUtil2.getRootContainer(context);
        val referenceResource = rootElement.eResource
        val resourceSet = referenceResource.resourceSet
        val userResources = resourceSet.resources.immutableCopy
        val builtInResourceURIs = #["/simpleui.metamodel/simpleui.xcore", "/simpleui.kirra/kirra.xcore", "/simpleui.value/value.xcore", "/simpleui.html/html.xcore"]
        
        val builtInResources = builtInResourceURIs.map[uri|resourceSet.getResource(
            Helpers.translatePluginURI(uri), 
            true
        )]
        val simpleuiResource = builtInResources.findFirst[it.URI.lastSegment.startsWith('simpleui.')]
        val moduleImports = userResources.map[it.contents].flatten.map[EcoreUtil2.getAllContentsOfType(it, ModuleImport)].flatten
        val importedResources = (moduleImports).map[Helpers.findPackage(referenceResource, it.importedNamespace, true)?.eResource].filterNull.toList
        val allResources = builtInResources + userResources + importedResources
        //val componentEClass = simpleuiResource.contents.map[EcoreUtil2.getAllContentsOfType(it, EClass)].flatten.map[it as EClass].findFirst[it.name == 'Component']
        val componentEClass = SimpleuiPackage.Literals.COMPONENT
        val eClasses = allResources.map[it.contents].flatten.map[EcoreUtil2.getAllContentsOfType(it, EClass)].flatten.toList
        val eClassesNames = eClasses.map[it.name].toList
        val scopeContents = eClasses.filter[Helpers.isSuperType(componentEClass, it)].toList
        val scopeContentsHelper = scopeContents.map[it.name].toList
        scopeContents.sortBy([it.name])
        scopeContents
    }
    
}
