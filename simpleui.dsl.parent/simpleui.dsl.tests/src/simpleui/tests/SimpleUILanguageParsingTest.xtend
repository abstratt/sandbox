/*
 * generated by Xtext 2.20.0
 */
package simpleui.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import simpleui.Application
import simpleui.Node
import simpleui.SimpleuiPackage
import value.PrimitiveValue

@ExtendWith(InjectionExtension)
@InjectWith(SimpleUILanguageInjectorProvider)
class SimpleUILanguageParsingTest {
    @Inject
    ParseHelper<Application> parseHelper
    
    @Test
    def void loadModel() {
        val result = parseHelper.parse('''
            application app1 {
                
                import html
            
                screen1 : Screen {
                    button1 : Button (
                        caption "Ok"
                    )
                }    
            }
        ''')
        checkModel(result)
        
        Assertions.assertTrue(result.nodes.size == 1)
        val Node screen1 = result.nodes.get(0)
        Assertions.assertEquals(SimpleuiPackage.Literals.SCREEN.name, screen1.componentType.name)
        val Node button1 = screen1.children.findFirst[it.name == 'button1']
        Assertions.assertEquals(SimpleuiPackage.Literals.BUTTON.name, button1.componentType.name)
        Assertions.assertEquals(SimpleuiPackage.Literals.BUTTON__CAPTION, button1.metadata.slots.get(0).slotFeature)
        Assertions.assertEquals("Ok", (button1.metadata.slots.get(0).value as PrimitiveValue).primitiveValue)
    }
    
    protected def void checkModel(Application result) {
        Assertions.assertNotNull(result)
        val errors = result.eResource.errors
        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    }
    
    //@Test
    def void namespaceImport() {
        val result = parseHelper.parse('''
            application app1 {
                
                import html
                screen1 : Screen {
                    button1 : Button (
                        caption "Ok"
                    )
                }
            }
        ''')
        Assertions.assertNotNull(result)
        val errors = result.eResource.errors
        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
        val resourceURIs = result.eResource.resourceSet.resources.map[URI]
        val imported = resourceURIs.findFirst[it.lastSegment.startsWith("html")]
        Assertions.assertNotNull(imported)
    }
}
